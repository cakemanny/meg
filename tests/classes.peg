

ranges: [A-Za-z0-9_]
;
newline: [\n]
;
octal: [\040]
;
negative: [^a]
;

char_classes: [abc];
should_be: [abc];
deduped: [abc];

%%

let failed = ref false

let () =
  let is_match = function Ok (_,(_,_,len)) -> len=0 | Error _ -> false in
  let test (rule, input, expected) =
    let result = rule (string_view_of_string input) in
    if is_match result <> expected
    then (
      failed := true;
      Printf.eprintf "Expected \"%s\" to%s match, but it didn't!"
        input (if expected then "" else " not" )
      )
    else ()
  in
  List.iter test [
    ranges, "a", true;
    ranges, "b", true;
    ranges, "z", true;
    ranges, "A", true;
    ranges, "B", true;
    ranges, "Z", true;
    ranges, "4", true;
    ranges, "_", true;
    ranges, "-", false;
    newline, "\n", true;
    octal, " ", true;
    negative, "a", false;
    negative, "b", true;
  ];
  if !failed then exit 1 else exit 0

